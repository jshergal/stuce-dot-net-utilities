name: CI/CD

on:
  workflow_dispatch:

  push:
    paths-ignore:
    - "**/*.md"
    - "**/*.gitignore"
    - "**/*.gitattributes"

  pull_request:
    branches:
      - master

  release:
    types:
      - published

env:
  # more info on dotnet cli environment variables here: https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-environment-variables
  # Disable sending usage data to Microsoft
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  # Disable welcome message on dotnet CLI first run
  DOTNET_NOLOGO: true
  # Disable redundant package caching
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
  build_and_test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up dotnet 
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: |
         6.0.x
         7.0.x

    - uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Install dependencies
      run: |
        dotnet restore

    - name: Build
      run: |
        dotnet build --configuration Release --version-suffix "prerelease.${{github.run_number}}" --no-restore

    - name: Run tests
      env:
        TINIFY_KEY: ${{ secrets.TINIFY_KEY }}
      run: |
        dotnet test --configuration Release --no-build --verbosity normal
        
  # deploy:
  #   needs: build_and_test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Set up dotnet 
  #       uses: actions/setup-dotnet@v2
  #       with:
  #         dotnet-version: 7.0.x

  #     - name: Create Release NuGet package
  #       if: github.event_name == 'release'
  #       run: |
  #         arrTag=(${GITHUB_REF//\// })
  #         VERSION="${arrTag[2]}"
  #         VERSION="${VERSION//v}"
  #         echo Clean Version: $VERSION
  #         dotnet pack StuceSoftware.Utilities/StuceSoftware.Utilities.csproj -v normal -c Release --include-symbols --include-source -p:PackageVersion=$VERSION -o .

  #     - name: Create pre-release NuGet package
  #       if: github.event_name == 'push' && github.ref_type == 'branch' && github.ref_name == 'main'
  #       run: |
  #         dotnet pack StuceSoftware.Utilities/StuceSoftware.Utilities.csproj --version-suffix "prerelease.${{github.run_number}}" -v normal -c Release --include-symbols --include-source  -o .
          
  #     - name: Push to Nuget
  #       run: |
  #         dotnet nuget push *.nupkg --skip-duplicate -s https://api.nuget.org/v3/index.json --api-key ${{secrets.NUGET_API_KEY}}
